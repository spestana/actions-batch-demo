---
name: Build All Bands
run-name: ${{ inputs.workflow_name }}
on:
  workflow_dispatch:
    inputs:
      startDatetime:
        type: string
        required: true
        description: startDatetime
        default: '2024-05-10T00:00:00Z'
      endDatetime:
        type: string
        required: true
        description: endDatetime
        default: '2024-05-10T00:59:00Z'
      min_lon:
        type: string
        required: true
        description: min_lon
        default: -122.12
      min_lat:
        type: string
        required: true
        description: min_lat
        default: 46.6
      max_lon:
        type: string
        required: true
        description: max_lon
        default: -121.35
      max_lat:
        type: string
        required: true
        description: max_lat
        default: 47.1
      satellite_east:
        type: choice
        required: true
        description: GOES-East satellite
        default: goes16
        options:
          - goes16
      satellite_west:
        type: choice
        required: true
        description: GOES-West satellite
        default: goes18
        options:
          - goes17
          - goes18
      product:
        type: string
        required: true
        description: product
        default: 'ABI-L1b-RadC'
      variable:
        type: string
        required: true
        description: variable
        default: 'Rad'
      #workflow_name:
      #  description: Custom workflow name
      #  required: false
      #  default: goes-build-zarr
      #  type: string
  workflow_call:
    inputs:
      startDatetime:
        type: string
        description: startDatetime
      endDatetime:
        type: string
        description: endDatetime
      min_lon:
        type: string
        description: min_lon
      min_lat:
        type: string
        description: min_lat
      max_lon:
        type: string
        description: max_lon
      max_lat:
        type: string
        description: max_lat
      satellite_east:
        type: string
        description: GOES-East satellite
      satellite_west:
        type: string
        description: GOES-West satellite
      product:
        type: string
        description: product
      variable:
        type: string
        description: variable
      #workflow_name:
      #  description: Custom workflow name
      #  type: string
jobs:
  build-zarr:
    name: goes-build-zarr
    runs-on: ubuntu-latest
    defaults:
        run:
            shell: bash -el {0}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Install Conda environment with Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          cache-environment: false
          environment-file: environment.yml
          init-shell: bash
          environment-name: goesenv
      
      - name: Make request file from user input, download GOES imagery, and build zarr files
        env:
          OPENTOPO_API_KEY: ${{ secrets.OPENTOPO_API_KEY }}
        shell:  bash -el -c "python -u {0}"
        run: |
          import goes_ortho as go
          for band in range(1,17):
            go.get_data.make_request_json('goes_east-b{}-build-zarr'.format(band), '${{ inputs.startDatetime }}', '${{ inputs.endDatetime }}', [${{ inputs.min_lon }}, ${{ inputs.min_lat }}, ${{ inputs.max_lon }}, ${{ inputs.max_lat }}], '${{ inputs.satellite_east }}', '${{ inputs.product }}', band, '${{ inputs.variable }}', '${{ secrets.OPENTOPO_API_KEY }}')
            go.get_data.build_zarr('goes_east-b{}-build-zarr'.format(band))
            go.get_data.make_request_json('goes_west-b{}-build-zarr'.format(band), '${{ inputs.startDatetime }}', '${{ inputs.endDatetime }}', [${{ inputs.min_lon }}, ${{ inputs.min_lat }}, ${{ inputs.max_lon }}, ${{ inputs.max_lat }}], '${{ inputs.satellite_west }}', '${{ inputs.product }}', band, '${{ inputs.variable }}', '${{ secrets.OPENTOPO_API_KEY }}')
            go.get_data.build_zarr('goes_west-b{}-build-zarr'.format(band))
      
      # https://words.yuvi.in/post/python-in-github-actions/
      - name: Make preview gif animation
        shell:  bash -el -c "python -u {0}"
        run: |
          import xarray as xr
          import geogif
          for band in range(1,17): \
            ds16 = xr.open_zarr('goes_east-b{}-build-zarr.zarr'.format(band))
            da = ds16.${{ inputs.variable }}
            gif_bytes = geogif.dgif(da, fps=5, cmap='Greys_r', date_format='%Y-%m-%d %H:%M:%S', date_position='ul', bytes=True).compute()
            with open('goes_east-b{}.gif'.format(band), 'wb') as f:
                f.write(gif_bytes)
            ds18 = xr.open_zarr('goes_west-b{}-build-zarr.zarr'.format(band))
            da = ds18.${{ inputs.variable }}
            gif_bytes = geogif.dgif(da, fps=5, cmap='Greys_r', date_format='%Y-%m-%d %H:%M:%S', date_position='ul', bytes=True).compute()
            with open('goes_west-b{}.gif'.format(band), 'wb') as f:
                f.write(gif_bytes)
            ds16['time'] = ds18.time
            ds18['${{ inputs.variable }}'] = (ds16.${{ inputs.variable }} + ds18.${{ inputs.variable }}) / 2
            ds18.to_zarr('goes-b{}-merged.zarr'.format(band))
            da = ds18.${{ inputs.variable }}
            gif_bytes = geogif.dgif(da, fps=5, cmap='Greys_r', date_format='%Y-%m-%d %H:%M:%S', date_position='ul', bytes=True).compute()
            with open('goes-b{}-merged.gif'.format(band), 'wb') as f:
                f.write(gif_bytes)
      
      - uses: actions/upload-artifact@v4
        with:
          name: goes-build-zarr
          path: |
            *.json
            *.zarr
            *.gif
